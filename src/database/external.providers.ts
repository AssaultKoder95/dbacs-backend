import * as crypto from 'crypto';

/*
 * AES-CBC-256 encrypted master credentials.
 * See logic below for encryption.
 * Uses random IV for extra security.
 * Random IV stored in cipher text before colon.
 * The decryption key will be provided during runtime
 */
const cipherText =
  '3b2d65117238069e519fa7801b0ca998:605ccb3a5ea8a96c79a5e57f9b7db3ed7e55b3517bbf8585a09c61d18aa8a85e7b1901414f8b6d24cc50306aee187f8daed628d0d0f1f0c1948127af05cc6adcaad43bb0bba474c96acf4a34886f8912cd14a60eb1913a7b515ed60c45b2ecc9a32441f19ea737f4f910fa280245e72afc57c4abb78cb1eb40e9b0368b66716cf8b69eeb4020d821631accc8d577641fb73345dca1ce8eb78e1beab258ae6c51d08d1104fb080b25bca191c5d9362893b86a12a9328ab45aa855b68c9df33032ab853eb68bab2ea51dabecff865a50ca0f09baf1607105b571c530d5121b90f1f5d97d795d829cf79eaa8947f3a488b1ea163b5ac35b1c75bb4e95b78c0bb9fe7333aeafb539c9e829497e435cd7568f8f4d8c09ceaccaabf6ef0a9fcd3aff8dd3c54e17790214690d17a0bbf3d394c64c719f0d878bb021989c3154b3d91fb120154f1de613e40441d2c3ef3db0f883e1e69da67da46624c1babe47b204f8f991395c82366fd99a7ff5fd61aad264dbbf57a3543fc1082655a7f074830162ed094cad1506895b140636a6052703b6fbd832aa21b9aed121d1fbe619908f47f112de822573ffc0a7bc76d0e2116e1731dc7808bbdcdc5f2668b46ff07c2b4276a15003244b43cdbf6e7e7be19d81c0303d463217e4986b88abd038d9f46eddf5012845b9276f1b97c6b440d445fa4b1affb12011619a0c4bf6368d64b8b4583ed90f4c5bf62be3b603fefa32a129062cc851122a8278b10acbc5f90e63c4d0636f1626ea1b60c8bf42649301014865dff1798e5597b7cd02fb559ad714458267ed170a05f21a6c651e067ce94b2ea9e8cfd880daba8c395821de083cc8e5be6aa7253500d6b59d1eccca94f501f5a6ea764c4e5a869ac242d133527cc8693e5c40edfb387fcd02bc9321fde04818efe82b8d4e07209306fe48d5c6ca0e3a4bdc65cbbdf66e2a24ab9376e67685af0c39728b2af69c49577ce23df6a69d895f0f59923d34e9cff5ebeeb48a19dbeb81ea3cad5793a4212267914e336f63c463b547becf5b80411698f231a44fc62deb970ddec3ce72220f51363fd06bb5b17320ee12406b4100b9fbcd965cb3deb50d71467aae5a89af6ed839c8bd95f37a59193482252903899fb38c14f0717e0229e1d5e60b4100a8cf3b11fd706859900e660e3884956a9ad0c41d8cb607a59e215a2335a279095a7c5bf134df9fb00b397c6decc3053c49b75d60f7000c85a8d8d464ddf5bc6a966ba708471c8e92645396712d542a4738c49e255c053a45d85053b33bd1834da1372b6da70911b79f4f25aafe0520b5d31bc7ac51506105bf008558e070dcef955746381bb5b1ccc238be3ecccf10b32fc0b4aa5c9960fad5c43291717e354a36ad37d91832c351dfdf4949adbc250d6000d695358063ed73a769ccd2cc68cdaebc3af8e91f57325d78bf1bf1a53797905c78a5ff539cfa56fb90e0feedfec4516834535945a38b7720c1e6f6c7bf5c11c0c1ea960c587b3fe2379b5c4e727eb8355d1129ef62a74fcc4a84aa7afa589772fa8dd5838922643863bf96bd81d3f8dabc2c08f3e78b9b1443776d31a9e66a04e48f8ab91a78bf3fa9755d3028d8339f8592464d8a28250a2ff832b17f37f00813bde7683f69ac46d4b71124d0d415f12573d9eef16c232b84ea49973017cb9f7d3b83b7db0ac0598ad7f4e3e4750b1116cde994decff333b8562a858ad1ba4096bc6541af356d08a37c337cf2b3c7c6289a57b3ff561d603356ccb7b8da34f549d5f4a267c792be9f25706ae8fdeb787da09b1c2cc456ce3670c0076ed450a8471de561adcb72ecfafe1630dc255b8127a42e4a306457167a989baecab07126a7749de269788e816c6ac10a01fb91e6342ce02241896cf9ca97e1da6e417a28e30ebcd9fcd2f82005ce4963d84cffa44a8a47f97cb14765d8734b7e0d62589eaf03e3e0491da87c162cde4463fd76e803f130dd8ed4ec5f34fc087747026d40b40f650dc01365933948f4a0f2b0824db573351509544d3655c035bb08939c418ab718cf34cc9fe5bf4b947ab892e57deb86a31af13759bfbb7ea89469af9a228b5df68d0f23d767596223a80ff6a8056842612b72f6816c982f7f096175da17dca97c8d8847122c10a10b863d9e32a86ff02a326ebef316fcdad9d7ba3f53f14612069b734cddf366d9bd6b2729af9ef817757269aa5f99507c5cf269f4d642849ce7474eac40e3c24ecd23f57c9673a9d2d412af2efd5fe993993aa0bf4f428bb2932a4db0d864bba582012e200c39039d313045f28f20360f95a23d83ec89fa35ed2249cb032070d53ee65416a0d0dc3c730767b4650855e480532996222aabbd0ebd42a764d09b1fa79f2477924c843152ed7593e3cc743a3b9aa26bd91b26888ee554b0d829c27a87cadbbedf31dba4b2bcf823e96673197cd90a78d852b7feda7250ffb9758803828dd78668985d9abc368cfbcc12a432829b0c7fba0b4c03bd7fabbc6ff3aad767876cf84aca5f853dc14b6789c19cd8eaf00663ab5bcb0c37205a1f86c2fac9eefa15dd70db58532fe99de544bd9b9bcfeb2ef6e5484933453436492f05723d04dfd988caf99d2445231801ba91d7f6bf7e7ea9eb284f20fab27c97707a4371c89eb403c58dc6010a822b2f11a7859db2265f70a30de20c41516a193259d7a8241d5d4160a2167446d73adb814f8f72392c70a449df107c47716fa4a9e82127c47ff9919e28a858a3f3e1480e3b5ecc79aa4df92aa80352c78bf3ba5e7b259857a83e4e3cfbb4afe00a8c991392afd21ddd95e37213aa2738eb3e6b127c9e3c2ea44c1b2311dab86aa495de9e13656ab5ab7b68d45401ce6acdf54acee8ac566442df038c5b2101e8cedffc457bae2217ffc3e48eea1eea5b19aa4fef5afebf0eda68f67ef7ac25828ac5d4f176896cd4c76e862362696473d783cba98a8f439917e1f0eb69f50688fa20d3bcecab0fdfeef2682338c1aca5912c4ae057933a38cf6a262a16e5eb8ab34357683ca03fa5b19dea5ff1b923c01ef7245cd56690a9f3f0d4c7a47c688714b8c77a81bb5dce4774c43b28de4b9dc726841b57a39f17a1953a71e00a851e5dd0a1c438fe3d06413f691121ceae9c0aaa7f86b00f44b3d4087edc1ff603ed42d6c4b1c352402eb5ca8ed66a1333d758a3c199e914ba676ee849ac33542e03912669167bcbcbbb05c2b554af0e693f4f3fde72dbf8395e258cbba93497f6c2c70f9497fe378c1bdc2a404cec36ce675b79b00be5b59aa0d7965bae85ac908f10fa1f19026b66a1157daace5797ed1875c57165f5ddf95e0aa816e7705617fbf12cf63caf79f6b103607cbc6fe998e24ce03bc98cb4fbbcfaeb801be4e0a0d68811483e660d0ca62187d7930e2892c497559b96a6d11f1f30f1946470b7ffe12251311adb1e7178afabab37dc557670f8785ac07edc3306a4293e4c71b97d8b54b8195277e85829e38d1adb827faef73da670eae921ffe04b0a8bfaf5b8f4b7febcfb48f1a6e968d0c98f2917bbec2336c7f107ad5266b7140f9d89612830340079a6fa3239e74d9a6fd4633719f59c6f97b6dcf8e25704b34f04fae09c51500b7d114278687a61fde4e5ac93b107532d130ea2685a1065adf81aac6c3641c51b8d75bf3f0878dff4e597b49c89d2bdd5f42d520bde23e1a226005b91cffa1a60a8239d6ed17265ab873e35e08da44d3909935551eb3fa148901a4aa52b27a24e1256c0f6b0cc7c1069cdc4410b240d8c1d09580517497e939f85f76ce8e6ed5d381ff7f4b8295011970e2d718c75cdd553d9dcd9ad545191f4855a065bf30a7ad9624157993129a2559461f7d08388399fd7081eb006c6e88069a30e128530a1858ca368dcd2b279af3170110b37851379ffaae4b5171769d0d194b1f174987249bb33ae0931761ebd11f9f78368b2f64c8d0647e8890b5fa7a9bcc58695673074535ad0bcab84482b16a080d29f565e255f8827066e62a1ca1e00cfd8196ffbb66373586d008023031842af8dfe038aada78dece0df7d24d1eeee40db48912d189c0c987e6f7fa9c7ed21fc633190a51c72971fdddc77d590cc2e69f0c4b931380daf1e25bc2debbf2d7313fe558464c604d24d57ccdd7ddd6fe12870d8af21f84e79989f07c29d7b26483aa95498e5674709e3db3341a25ee7f1e78a7453c695ad8d9ad1134f8abb59484993b265cd299b4f35b667c92656ac472c463cc5d199b44a612bf537463df7cb21be78501409164064e92085c0229a8da503f1aa8818e57e336cb1b2c70c7cc80352ee354fda078eacf16ad5b6d5a5cdf8dcce954dc4056a8bd130fd30bd3e7362fe87a941bd27b01ab1fe4f59b4849414174b13fda59968ccf1012f40d52a65ff536996c465d4e7483f5717c1f73db125a25a453289f1e91d90';

function decrypt(text, key) {
  const textParts = text.split(':');
  const iv = Buffer.from(textParts.shift(), 'hex');
  const encryptedText = Buffer.from(textParts.join(':'), 'hex');
  const decipher = crypto.createDecipheriv('aes-256-cbc', Buffer.from(key), iv);
  let decrypted = decipher.update(encryptedText);

  decrypted = Buffer.concat([decrypted, decipher.final()]);

  return decrypted.toString();
}

export const decryptExternalDatabases = (key) =>
  JSON.parse(decrypt(cipherText, key));
